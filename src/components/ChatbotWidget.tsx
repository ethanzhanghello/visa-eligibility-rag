import React, { useState, useRef, useEffect } from 'react';
import { useTranslation } from 'react-i18next';

interface ChatMessage {
  id: string;
  type: 'user' | 'bot';
  message: string;
  timestamp: Date;
  confidence?: number;
}

interface ChatbotWidgetProps {
  currentLanguage: string;
  userContext?: {
    caseInfo?: any;
    currentStep?: string;
  };
}

export const ChatbotWidget: React.FC<ChatbotWidgetProps> = ({
  currentLanguage,
  userContext
}) => {
  const { t } = useTranslation();
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (messages.length === 0) {
      // Add welcome message
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        type: 'bot',
        message: currentLanguage === 'zh' 
          ? 'ÊÇ®Â•ΩÔºÅÊàëÊòØÊÇ®ÁöÑÁªøÂç°Áî≥ËØ∑Âä©Êâã„ÄÇÊàëÂèØ‰ª•Â∏ÆÊÇ®ÂõûÁ≠îÂÖ≥‰∫éÁî≥ËØ∑ÊµÅÁ®ã„ÄÅÊñá‰ª∂Ë¶ÅÊ±ÇÂíåÊó∂Èó¥ÂÆâÊéíÁöÑÈóÆÈ¢ò„ÄÇËØ∑ÈóÆÊúâ‰ªÄ‰πàÂèØ‰ª•Â∏ÆÂä©ÊÇ®ÁöÑÂêóÔºü'
          : 'Hello! I\'m your green card application assistant. I can help answer questions about the application process, document requirements, and timelines. How can I assist you today?',
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
    }
  }, [currentLanguage]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      message: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // Simulate API call to RAG system
      // In real implementation, this would call your existing RAG API
      const response = await simulateRAGResponse(inputMessage, currentLanguage, userContext);
      
      const botMessage: ChatMessage = {
        id: `bot_${Date.now()}`,
        type: 'bot',
        message: response.answer,
        timestamp: new Date(),
        confidence: response.confidence
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      const errorMessage: ChatMessage = {
        id: `error_${Date.now()}`,
        type: 'bot',
        message: currentLanguage === 'zh' 
          ? 'Êä±Ê≠âÔºåÊàëÁé∞Âú®Êó†Ê≥ïÂõûÁ≠îÊÇ®ÁöÑÈóÆÈ¢ò„ÄÇËØ∑Á®çÂêéÂÜçËØïÊàñËÅîÁ≥ª‰∫∫Â∑•ÂÆ¢Êúç„ÄÇ'
          : 'Sorry, I\'m unable to answer your question right now. Please try again later or contact support.',
        timestamp: new Date(),
        confidence: 0
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const getQuickQuestions = () => {
    const questions = currentLanguage === 'zh' ? [
      'ÊàëÈúÄË¶ÅÂáÜÂ§áÂì™‰∫õÊñá‰ª∂Ôºü',
      'Èù¢ËØïÊó∂‰ºöÈóÆ‰ªÄ‰πàÈóÆÈ¢òÔºü',
      'ÊàëÁöÑÊ°à‰ª∂ËøõÂ∫¶Ê≠£Â∏∏ÂêóÔºü',
      'Â¶Ç‰ΩïÂáÜÂ§á‰ΩìÊ£ÄÔºü'
    ] : [
      'What documents do I need?',
      'What questions are asked in the interview?',
      'Is my case progressing normally?',
      'How do I prepare for the medical exam?'
    ];

    return questions;
  };

  const handleQuickQuestion = (question: string) => {
    setInputMessage(question);
  };

  return (
    <>
      {/* Floating Chat Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all duration-200 transform hover:scale-105"
        >
          {isOpen ? (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          ) : (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
          )}
        </button>

        {/* Notification Badge */}
        {!isOpen && (
          <div className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center">
            ü§ñ
          </div>
        )}
      </div>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 w-96 h-96 bg-white rounded-lg shadow-xl border border-gray-200 z-50 flex flex-col">
          {/* Header */}
          <div className="bg-blue-600 text-white p-4 rounded-t-lg flex items-center justify-between">
            <div className="flex items-center">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center mr-3">
                ü§ñ
              </div>
              <div>
                <h3 className="font-medium">
                  {t('chatbotAssistant', 'AI Assistant')}
                </h3>
                <p className="text-xs text-blue-100">
                  {t('onlineNow', 'Online now')}
                </p>
              </div>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="text-blue-100 hover:text-white"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {/* Messages */}
          <div className="flex-1 p-4 overflow-y-auto bg-gray-50">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`mb-4 ${message.type === 'user' ? 'text-right' : 'text-left'}`}
              >
                <div
                  className={`inline-block max-w-xs lg:max-w-md px-4 py-2 rounded-lg text-sm ${
                    message.type === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-white text-gray-800 border border-gray-200'
                  }`}
                >
                  {message.message}
                  {message.confidence !== undefined && message.confidence < 0.7 && (
                    <div className="mt-1 text-xs text-yellow-600">
                      {currentLanguage === 'zh' 
                        ? '‚ö†Ô∏è Âª∫ËÆÆÂí®ËØ¢‰∏ì‰∏öÂæãÂ∏àÁ°ÆËÆ§'
                        : '‚ö†Ô∏è Consider consulting a professional for confirmation'
                      }
                    </div>
                  )}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  {message.timestamp.toLocaleTimeString()}
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="text-left mb-4">
                <div className="inline-block bg-white text-gray-800 border border-gray-200 px-4 py-2 rounded-lg">
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                    {t('thinking', 'Thinking...')}
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Questions (shown when no recent messages) */}
          {messages.length <= 1 && (
            <div className="p-3 border-t border-gray-200">
              <p className="text-xs text-gray-600 mb-2">
                {t('quickQuestions', 'Quick questions:')}
              </p>
              <div className="space-y-1">
                {getQuickQuestions().map((question, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickQuestion(question)}
                    className="w-full text-left text-xs text-blue-600 hover:text-blue-800 p-1 hover:bg-blue-50 rounded"
                  >
                    ‚Ä¢ {question}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex items-center space-x-2">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={currentLanguage === 'zh' ? 'ËæìÂÖ•ÊÇ®ÁöÑÈóÆÈ¢ò...' : 'Type your question...'}
                className="flex-1 resize-none border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                rows={1}
                disabled={isLoading}
              />
              <button
                onClick={handleSendMessage}
                disabled={isLoading || !inputMessage.trim()}
                className="bg-blue-600 text-white rounded-lg p-2 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

// Simulate RAG API response
async function simulateRAGResponse(
  question: string, 
  language: string, 
  context?: any
): Promise<{ answer: string; confidence: number }> {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

  // Mock responses based on common questions
  const responses = language === 'zh' ? {
    'Êñá‰ª∂': {
      answer: 'ÂØπ‰∫éÊÇ®ÁöÑEB-2Áî≥ËØ∑ÔºåÊÇ®ÈúÄË¶ÅÂáÜÂ§á‰ª•‰∏ã‰∏ªË¶ÅÊñá‰ª∂Ôºö\n\n1. Ë°®Ê†ºI-485ÔºàË∞ÉÊï¥Ë∫´‰ªΩÁî≥ËØ∑Ôºâ\n2. Ë°®Ê†ºI-693Ôºà‰ΩìÊ£ÄÊä•ÂëäÔºâ\n3. Êä§ÁÖßÂ§çÂç∞‰ª∂\n4. Âá∫ÁîüËØÅÊòé\n5. ÁªìÂ©öËØÅÔºàÂ¶ÇÈÄÇÁî®Ôºâ\n6. Ë≠¶ÂØüËØÅÊòé\n7. Ë¥¢Âä°ÊîØÊåÅËØÅÊòé\n8. Èõá‰∏ªÊîØÊåÅ‰ø°\n\nÂª∫ËÆÆÊÇ®ÊèêÂâçÂáÜÂ§áËøô‰∫õÊñá‰ª∂ÔºåÂõ†‰∏∫Êúâ‰∫õÊñá‰ª∂ÔºàÂ¶Ç‰ΩìÊ£ÄÔºâÊúâÊó∂ÊïàË¶ÅÊ±Ç„ÄÇ',
      confidence: 0.95
    },
    'Èù¢ËØï': {
      answer: 'ÁªøÂç°Èù¢ËØïÈÄöÂ∏∏‰ºöÈóÆ‰ª•‰∏ãÈóÆÈ¢òÔºö\n\n1. ÊÇ®ÁöÑÂ∑•‰ΩúËÉåÊôØÂíåÂΩìÂâçËÅå‰Ωç\n2. ‰∏∫‰ªÄ‰πàÈÄâÊã©Âú®ÁæéÂõΩÂ∑•‰Ωú\n3. ÊÇ®ÁöÑÊïôËÇ≤ËÉåÊôØ\n4. ÂÆ∂Â∫≠ÊÉÖÂÜµ\n5. Êú™Êù•ÁöÑËÆ°Âàí\n6. ÊòØÂê¶ÊúâÁäØÁΩ™ËÆ∞ÂΩï\n7. ÊòØÂê¶ÊõæÁªèËøùÂèçÁßªÊ∞ëÊ≥ï\n\nËØ∑ËØöÂÆûÂõûÁ≠îÊâÄÊúâÈóÆÈ¢òÔºåÂπ∂Â∏¶ÈΩêÊâÄÊúâË¶ÅÊ±ÇÁöÑÊñá‰ª∂„ÄÇ',
      confidence: 0.88
    },
    'ËøõÂ∫¶': {
      answer: 'Ê†πÊçÆÊÇ®ÁöÑÊ°à‰ª∂‰ø°ÊÅØÔºåÊÇ®ÁõÆÂâçÂ§Ñ‰∫éÁ¨¨3Èò∂ÊÆµÔºàÁîüÁâ©ËØÜÂà´Â∑≤ÂÆåÊàêÔºâÔºåËøôÊòØÊ≠£Â∏∏ÁöÑËøõÂ∫¶„ÄÇÂØπ‰∫éEB-2Á±ªÂà´ÁöÑ‰∏≠ÂõΩÂá∫ÁîüÁî≥ËØ∑‰∫∫ÔºåÂΩìÂâçÁöÑÂ§ÑÁêÜÊó∂Èó¥ÈÄöÂ∏∏ÈúÄË¶ÅÔºö\n\n‚Ä¢ ‰ªéÁîüÁâ©ËØÜÂà´Âà∞EADÊâπÂáÜÔºö2-4‰∏™Êúà\n‚Ä¢ Êï¥‰∏™ÊµÅÁ®ãÈ¢ÑËÆ°ÂÆåÊàêÊó∂Èó¥Ôºö2025Âπ¥9Êúà\n\nÊÇ®ÁöÑËøõÂ∫¶ÊØî65%ÁöÑÂêåÁ±ªÁî≥ËØ∑‰∫∫Ë¶ÅÂø´ÔºåÁªßÁª≠‰øùÊåÅÔºÅ',
      confidence: 0.92
    },
    '‰ΩìÊ£Ä': {
      answer: '‰ΩìÊ£ÄÂáÜÂ§áË¶ÅÁÇπÔºö\n\n1. ÂØªÊâæUSCISÊåáÂÆöÁöÑÊ∞ë‰∫ãÂ§ñÁßëÂåªÁîü\n2. Â∏¶ÈΩêÁñ´ËãóËÆ∞ÂΩï\n3. ÂáÜÂ§á‰ΩìÊ£ÄË¥πÁî®ÔºàÈÄöÂ∏∏$200-500Ôºâ\n4. ‰ΩìÊ£ÄÊä•ÂëäI-693ÂøÖÈ°ªÂØÜÂ∞Å\n5. ‰ΩìÊ£ÄÊúâÊïàÊúü‰∏∫2Âπ¥\n6. Âª∫ËÆÆÂú®Èù¢ËØïÂâç3‰∏™ÊúàÂÜÖÂÆåÊàê\n\nÊ≥®ÊÑèÔºö‰ΩìÊ£ÄÊä•ÂëäÂøÖÈ°ªÁî±ÊÇ®Êú¨‰∫∫Âú®Èù¢ËØïÊó∂Êèê‰∫§ÁªôUSCISÂÆòÂëò„ÄÇ',
      confidence: 0.90
    }
  } : {
    'document': {
      answer: 'For your EB-2 application, you\'ll need these key documents:\n\n1. Form I-485 (Application to Adjust Status)\n2. Form I-693 (Medical Examination)\n3. Passport copy\n4. Birth certificate\n5. Marriage certificate (if applicable)\n6. Police certificates\n7. Financial support evidence\n8. Employment letter\n\nI recommend preparing these documents early, as some (like medical exams) have time limitations.',
      confidence: 0.95
    },
    'interview': {
      answer: 'Green card interviews typically include questions about:\n\n1. Your work background and current position\n2. Why you chose to work in the US\n3. Your educational background\n4. Family situation\n5. Future plans\n6. Criminal history\n7. Immigration violations\n\nBe honest with all answers and bring all requested documents.',
      confidence: 0.88
    },
    'progress': {
      answer: 'Based on your case information, you\'re currently at Stage 3 (Biometrics Completed), which is normal progress. For EB-2 China-born applicants, current processing times typically require:\n\n‚Ä¢ Biometrics to EAD approval: 2-4 months\n‚Ä¢ Total estimated completion: September 2025\n\nYou\'re ahead of 65% of similar applicants - keep it up!',
      confidence: 0.92
    },
    'medical': {
      answer: 'Medical exam preparation:\n\n1. Find a USCIS-designated civil surgeon\n2. Bring vaccination records\n3. Prepare exam fees ($200-500 typically)\n4. I-693 report must be sealed\n5. Medical exam valid for 2 years\n6. Complete within 3 months before interview\n\nNote: You must personally submit the sealed medical report to the USCIS officer during your interview.',
      confidence: 0.90
    }
  };

  // Find matching response
  const questionLower = question.toLowerCase();
  for (const [key, response] of Object.entries(responses)) {
    if (questionLower.includes(key)) {
      return response;
    }
  }

  // Default response for unmatched questions
  return {
    answer: language === 'zh' 
      ? 'ÊÑüË∞¢ÊÇ®ÁöÑÈóÆÈ¢ò„ÄÇËøôÊòØ‰∏Ä‰∏™ÂæàÂ•ΩÁöÑÈóÆÈ¢òÔºå‰ΩÜÊàëÈúÄË¶ÅÊõ¥Â§ö‰ø°ÊÅØÊù•ÁªôÊÇ®ÂáÜÁ°ÆÁöÑÁ≠îÊ°à„ÄÇÂª∫ËÆÆÊÇ®Ôºö\n\n1. Êü•ÁúãUSCISÂÆòÊñπÁΩëÁ´ôËé∑ÂèñÊúÄÊñ∞‰ø°ÊÅØ\n2. Âí®ËØ¢ÊÇ®ÁöÑÁßªÊ∞ëÂæãÂ∏à\n3. ËÅîÁ≥ªUSCISÂÆ¢ÊúçÁÉ≠Á∫ø\n\nÂ¶ÇÊûúÊÇ®ÊúâÊõ¥ÂÖ∑‰ΩìÁöÑÈóÆÈ¢òÔºåÊàëÂæà‰πêÊÑèÂ∏ÆÂä©ÊÇ®„ÄÇ'
      : 'Thank you for your question. This is a great question, but I need more information to give you an accurate answer. I recommend:\n\n1. Check the official USCIS website for latest information\n2. Consult with your immigration attorney\n3. Contact USCIS customer service\n\nIf you have more specific questions, I\'d be happy to help.',
    confidence: 0.6
  };
} 